package com.kh.chap04_field.model.vo;

/*
 *  >> 변수 구분
 * 
 *  - 전역 변수 : 클래스 영역에 "바로" 선언한 변수 --> 클래스 내에서면 어디서든 전역으로 다 사용 가능하다. 
 *  - 지역 변수 : 클래스 영역내에 어떤 특정한 구역 ({}) 에 선언한 변수 --> 선언된 해당 그 지역에서만 사용 가능하다.
 *  			* 특정한 구역 : 메소드 {}, 제어문(if, for) {} 등등...
 *  
 *  1. 전역변수
 *  - 필드 == 멤버변수 == 인스턴스 변수
 *  생성시점 : new 연산자를 통해서 객체 생성시 (heap 영역에 필드갯수만큼 객체 생성됨)
 *  소멸시점 : 객체 소멸시 같이 소멸
 *  
 *  2. 지역변수
 *  생성시점 : 지역변수가 속해있는 특정한 구역({}) 실행(호출)시 메모리 영역에 할당
 *  소멸시점 : 특정한 구역({}) 종료시 소멸
 *  
 *  - 클래스 변수 == static 변수 => 예약어 쓸 수 있는데 static이라는걸 쓰면 클래스 변수가 됨
 *  생성시점 : 프로그램 실행(해당 객체 생성 안돼도)과 동시에 무조건 메모리 영역(static)에 할당
 *  소멸시점 : 프로그램 종료될 때 소멸
 */


public class FieldTest1 { // 클래스 영역 시작
	
	/*
	private int a;
	
	
	public void method1() {
		int b = 10; // 메소드(method1) 안에서만 변수 사용 가능
		
		if(true) {
			int c = 20; // if문 안에서만 변수 사용 가능
			System.out.println(b); // 사용가능 => 클래스 입장에선 변수b는 지역변수 메소드 입장에서는 변수b는 전역변수
		}
	}
	public void method2() {
//		System.out.println(b); 지역변수라 출력 안됨
		System.out.println(a); // method2 밖에서 변수가 선언이 되어서 사용 가능 => 전역변수
	}
	
	*/
	
	// 멤버변수 (인스턴스변수) => 전역변수
	private int global;

	public void test(int num) { // test 메소드 시작
		// 매개변수(일종의 지역변수, 즉 메소드 영역 내에서만 쓸 수 있음)
		
		// 지역변수 (메소드 영역내에 선언) => 지역변수에는 접근제한자 같은거 붙이는거 아님(접근제한자 유무로 구별 가능)
//		int local; 변수 선언만 하면 출력안됨
		int local = 10;
		
		// 멤버변수 출력 => 멤버변수는 해당 이 객체 생성시 JVM이 기본값으로라도 초기화
		System.out.println(global); // 출력가능, 초기화 안되어있어도 출력 시 오류 안남, heap영역에 생성될 때 초기화가 되기때문에
		
		// 매개변수 출력 => 매개변수는 해당 이 메소드 호출시 반드시 값이 전달(입력)될거기 때문에 초기화 안되어있어도됨.
		System.out.println(num); // 출력가능, 초기화 안되어있지만 오류안남 -> 매개변수로 무조건 하나는 넘어올거니까
		
		// 지역변수 출력
		System.out.println(local); // 변수 초기화 안되어있으면 오류남
		// 위의 변수 또한 초기화 안되어있는데 왜 출력이 가능? 필드부에 선언된 변수는 heap영역에 생기고 heap영역은 값을 기본값으로 저장해놓기때문
		
		
	} // test 메소드 영역 끝
	
	
	
} // 클래스 영역 끝
